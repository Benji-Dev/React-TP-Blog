[{"/Users/benji/Downloads/React-workshop-main-main/src/index.tsx":"1","/Users/benji/Downloads/React-workshop-main-main/src/reportWebVitals.ts":"2","/Users/benji/Downloads/React-workshop-main-main/src/App.tsx":"3","/Users/benji/Downloads/React-workshop-main-main/src/components/PostsList.tsx":"4","/Users/benji/Downloads/React-workshop-main-main/src/components/EditPost.tsx":"5","/Users/benji/Downloads/React-workshop-main-main/src/components/UserProfile.tsx":"6","/Users/benji/Downloads/React-workshop-main-main/src/components/AllUsers.tsx":"7","/Users/benji/Downloads/React-workshop-main-main/src/private/Header.tsx":"8","/Users/benji/Downloads/React-workshop-main-main/src/components/PostItem.tsx":"9","/Users/benji/Downloads/React-workshop-main-main/src/private/Field.tsx":"10","/Users/benji/Downloads/React-workshop-main-main/src/components/ImageGalleryPicker.tsx":"11","/Users/benji/Downloads/React-workshop-main-main/src/api/post.ts":"12","/Users/benji/Downloads/React-workshop-main-main/src/private/SelectedImage.tsx":"13","/Users/benji/Downloads/React-workshop-main-main/src/private/Checkmark.tsx":"14"},{"size":500,"mtime":1649751307000,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":1649751307000,"results":"17","hashOfConfig":"16"},{"size":850,"mtime":1649751307000,"results":"18","hashOfConfig":"16"},{"size":1279,"mtime":1649751307000,"results":"19","hashOfConfig":"16"},{"size":6733,"mtime":1649751307000,"results":"20","hashOfConfig":"16"},{"size":1142,"mtime":1649751307000,"results":"21","hashOfConfig":"16"},{"size":95,"mtime":1649751307000,"results":"22","hashOfConfig":"16"},{"size":1617,"mtime":1649751307000,"results":"23","hashOfConfig":"16"},{"size":1732,"mtime":1649751307000,"results":"24","hashOfConfig":"16"},{"size":336,"mtime":1649751307000,"results":"25","hashOfConfig":"16"},{"size":2739,"mtime":1649751307000,"results":"26","hashOfConfig":"16"},{"size":1455,"mtime":1649751307000,"results":"27","hashOfConfig":"16"},{"size":2684,"mtime":1649751307000,"results":"28","hashOfConfig":"16"},{"size":846,"mtime":1649751307000,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qhrho2",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/benji/Downloads/React-workshop-main-main/src/index.tsx",[],[],"/Users/benji/Downloads/React-workshop-main-main/src/reportWebVitals.ts",[],[],"/Users/benji/Downloads/React-workshop-main-main/src/App.tsx",[],[],"/Users/benji/Downloads/React-workshop-main-main/src/components/PostsList.tsx",["81"],[],"import React, { useEffect, useState } from 'react'\nimport { getPosts } from '../api/post'\nimport { Post } from '../api/types'\nimport PostItem from './PostItem'\n\nconst PostsList = () => {\n    const [posts, setPosts] = useState<Array<Post>>([])\n    const [loading, setLoading] = useState(false)\n\n    // getPosts()\n\n    async function _getPosts() {\n        console.log(\"useEffect\");\n        const data = await getPosts();\n        console.log(data)\n        setPosts(data);\n    }\n\n    useEffect(() => {\n        _getPosts();\n    }, [])\n\n    function renderItem(values: Post) {\n        return (\n            <div key={values.id}>\n                <PostItem {...values} />\n            </div>\n        )\n    }\n\n    if (loading) {\n        return (\n            <section className=\"hero\">\n                <div className=\"hero-body\">\n                    <p className=\"title\">Loading ...</p>\n                </div>\n            </section>\n        )\n    }\n\n    if (posts.length === 0) {\n        return (\n            <section className=\"hero\">\n                <div className=\"hero-body\">\n                    <p className=\"title\">No Posts</p>\n                </div>\n            </section>\n        )\n    }\n\n    return <ul className=\"post-list\">{posts.map(renderItem)}</ul>\n}\n\nexport default PostsList\n","/Users/benji/Downloads/React-workshop-main-main/src/components/EditPost.tsx",["82","83","84","85"],[],"import React, { useReducer, useState, useEffect } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { Picker_Picture, Post, PostContent, User } from '../api/types'\nimport Field from '../private/Field'\nimport ImageGalleryPicker from './ImageGalleryPicker'\nimport { getPost } from '../api/post'\n\n\ntype FormEvent =\n    | React.ChangeEvent<HTMLTextAreaElement>\n    | React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLSelectElement>\n\ntype FormData = { name: string; value: string | number | undefined }\n\nconst formReducer = (state: Post | PostContent, event: FormData) => {\n    return {\n        ...state,\n        [event.name]: event.value,\n    }\n}\n\n\nconst EditPost = () => {\n    const [users, setUsers] = useState<Array<User>>([])\n    const [showPictureModal, setShowPictureModal] = useState<boolean>(false)\n    const [formData, setFormData] = useReducer(\n        formReducer,\n        {} as Post | PostContent\n    )\n    let { id } = useParams() // post id from url\n    const navigate = useNavigate() // create a navigate function instance\n\n    function handleModalPictureSubmit(picture: Picker_Picture) {\n        setFormData({\n            name: 'postImageUrl',\n            value: picture.src,\n        })\n    }\n\n    async function handleAddOrCreatePost(\n        event: React.FormEvent<HTMLFormElement>\n    ) {\n        // remove default reloading page\n        event.preventDefault()\n\n        // back to Home\n        navigate('/')\n    }\n\n    async function handleDeletePost() {\n        // back to Home\n        navigate('/')\n    }\n\n\n    function handleChange(event: FormEvent) {\n        //\n        const value =\n            event.target.name === 'userId'\n                ? Number(event.target.value)\n                : event.target.value\n        setFormData({\n            name: event.target.name,\n            value,\n        })\n    }\n\n    function convertToFormData(post: Post): void {\n        // helper to convert post data into formData\n        // use it before set formData with API data\n        // ex: convertToFormData(data):\n        ; (Object.keys(post) as Array<keyof typeof post>).map((key) => {\n            setFormData({\n                name: key,\n                value: post[key],\n            })\n        })\n    }\n\n    async function _getPost(id: number) {\n        const data = await getPost(id);\n        convertToFormData(data)\n    }\n\n    useEffect(() => {\n        // chaque fois que l'id change\n        _getPost(Number(id));\n    }, [id]);\n\n    function handleToggleModal() {\n        // Show & Hide picture modal\n        setShowPictureModal((s) => !s)\n    }\n\n    function getSelectedPicture() {\n        // prevent bad request and use a placeholder if no data\n        if (formData.postImageUrl) {\n            return formData.postImageUrl\n        } else {\n            return 'https://via.placeholder.com/320/810b14'\n        }\n    }\n\n    function getSelectedAuthor() {\n        // prevent bad request and use a placeholder if no data\n        if (formData.userId) {\n            // [WORK]\n            // You need to find the author name with the server\n            return '[TO DO]'\n        } else {\n            return 'Unknown author'\n        }\n    }\n\n    return (\n        <>\n            <form className=\"post-form\" onSubmit={handleAddOrCreatePost}>\n                <Field label=\"Title\">\n                    <input\n                        onBlur={handleChange}\n                        name=\"title\"\n                        className=\"input\"\n                        type=\"text\"\n                        placeholder=\"Text input\"\n                        value={formData.title}\n                    />\n                </Field>\n                <Field label=\"Content\">\n                    <textarea\n                        onBlur={handleChange}\n                        name=\"body\"\n                        className=\"textarea\"\n                        placeholder=\"e.g. Hello world\"\n                        value={formData.body}\n                    />\n                </Field>\n                <Field label=\"Post creator\">\n                    {!!!id ? (\n                        <div className=\"select\" defaultValue={formData.userId}>\n                            {users.length > 0 && (\n                                <select\n                                    name=\"userId\"\n                                    onChange={handleChange}\n                                    defaultValue={users[0].id}\n                                >\n                                    {users.map((user) => (\n                                        <option key={user.id} value={user.id}>\n                                            {user.name}\n                                        </option>\n                                    ))}\n                                </select>\n                            )}\n                        </div>\n                    ) : (\n                        <label>{getSelectedAuthor()}</label>\n                    )}\n                </Field>\n\n                <Field label=\"Post Picture\">\n                    <input type=\"hidden\" value=\"1\" name=\"postImageID\" />\n                    <div>\n                        <img src={getSelectedPicture()} />\n                        <button\n                            type=\"button\"\n                            className=\"button is-primary\"\n                            onClick={handleToggleModal}\n                        >\n                            Open picker modal\n                        </button>\n                    </div>\n                </Field>\n\n                {!!id && (\n                    <Field label=\"Extra actions\">\n                        <button\n                            type=\"button\"\n                            className=\"button is-warning\"\n                            onClick={handleDeletePost}\n                        >\n                            Delete post\n                        </button>\n                    </Field>\n                )}\n\n                <div className=\"field is-grouped is-grouped-centered\">\n                    <p className=\"control\">\n                        <button type=\"submit\" className=\"button is-primary\">\n                            Submit\n                        </button>\n                    </p>\n                    <p className=\"control\">\n                        <Link to=\"/\" className=\"button is-light\">\n                            Cancel\n                        </Link>\n                    </p>\n                </div>\n            </form>\n            {showPictureModal && (\n                <ImageGalleryPicker\n                    onClose={handleToggleModal}\n                    onSubmit={handleModalPictureSubmit}\n                />\n            )}\n        </>\n    )\n}\n\nexport default EditPost\n","/Users/benji/Downloads/React-workshop-main-main/src/components/UserProfile.tsx",["86","87"],[],"import React, { useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { User } from '../api/types'\nimport Field from '../private/Field'\n\nconst UserProfile = () => {\n    const [author, setAuthor] = useState<User | null>(null)\n\n    let { id } = useParams() // get the id from url\n\n    return (\n        author && (\n            <div className=\"user-profile-wrapper\">\n                <Field label=\"Name\">\n                    <span>{author.name}</span>\n                </Field>\n                <Field label=\"Email\">\n                    <span>{author.email}</span>\n                </Field>\n                <Field label=\"Company\">\n                    <span>{author.company.name}</span>\n                </Field>\n                <Field label=\"Phone\">\n                    <span>{author.phone}</span>\n                </Field>\n                <Field label=\"Address\">\n                    <span>{author.address.street} - </span>\n                    <span>{author.address.city} - </span>\n                    <span>{author.address.zipcode}</span>\n                </Field>\n            </div>\n        )\n    )\n}\n\nexport default UserProfile\n","/Users/benji/Downloads/React-workshop-main-main/src/components/AllUsers.tsx",["88"],[],"import React from 'react'\n\nconst AllUsers = () => {\n    return null\n}\n\nexport default AllUsers\n","/Users/benji/Downloads/React-workshop-main-main/src/private/Header.tsx",["89","90","91"],[],"import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Header = () => {\n    return (\n        <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n            <div className=\"navbar-brand\">\n                <a className=\"navbar-item\" href=\"#\">\n                    <img src=\"/wsf-logo.png\" />\n                </a>\n                <a\n                    role=\"button\"\n                    className=\"navbar-burger\"\n                    aria-label=\"menu\"\n                    aria-expanded=\"false\"\n                    data-target=\"navbarBasicExample\"\n                >\n                    <span aria-hidden=\"true\"></span>\n                    <span aria-hidden=\"true\"></span>\n                    <span aria-hidden=\"true\"></span>\n                </a>\n            </div>\n\n            <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n                <div className=\"navbar-end\">\n                    <div className=\"navbar-item\">\n                        <Link to=\"/\" className=\"navbar-item\">\n                            Home\n                        </Link>\n                        <Link to=\"/post/new\" className=\"navbar-item\">\n                            New post\n                        </Link>\n                        <Link to=\"/users/new\" className=\"navbar-item\">\n                            New user\n                        </Link>\n                        <Link to=\"/users\" className=\"navbar-item\">\n                            All users\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nexport default Header\n","/Users/benji/Downloads/React-workshop-main-main/src/components/PostItem.tsx",["92","93"],[],"import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Post, User } from '../api/types'\n\nconst PostItem = (props: Post) => {\n    const [author, setAuthor] = useState<User | null>(null)\n\n    return (\n        <Link to={`/post/${props.id}`} key={`key-${props.id}`}>\n            <div className=\"card\">\n                <div className=\"card-image\">\n                    <figure className=\"image is-4by3\">\n                        <img\n                            src={\n                                props.postImageUrl ||\n                                'https://picsum.photos/1280/960'\n                            }\n                            alt=\"Placeholder image\"\n                        />\n                    </figure>\n                </div>\n                <div className=\"card-content\">\n                    <div className=\"media\">\n                        <div className=\"media-content\">\n                            <p className=\"title is-4 post-title\">\n                                {props.title}\n                            </p>\n                        </div>\n                    </div>\n                    <div className=\"content post-content\">{props.body}</div>\n                    {author && (\n                        <footer className=\"card-footer\">\n                            <Link\n                                to={`/users/${author.id}`}\n                                className=\"card-footer-item\"\n                            >\n                                {author ? author.name : 'not defined'}\n                            </Link>\n                        </footer>\n                    )}\n                </div>\n            </div>\n        </Link>\n    )\n}\n\nexport default PostItem\n","/Users/benji/Downloads/React-workshop-main-main/src/private/Field.tsx",[],[],"/Users/benji/Downloads/React-workshop-main-main/src/components/ImageGalleryPicker.tsx",["94","95"],[],"import React, { useState, useCallback } from 'react'\nimport Gallery from 'react-photo-gallery'\nimport { Picker_Picture, API_Picture } from '../api/types'\nimport SelectedImage from '../private/SelectedImage'\n\ntype ImageGalleryPickerProps = {\n    onClose: () => void\n    onSubmit: (picture: Picker_Picture) => void\n}\n\nconst ImageGalleryPicker = ({ onClose, onSubmit }: ImageGalleryPickerProps) => {\n    const [selectedPicture, setSelectedPicture] =\n        useState<null | Picker_Picture>(null)\n    const [pictures, setPictures] = useState<Array<API_Picture>>([])\n\n    async function getPicture() {\n        // [TODO] Fetch picture\n    }\n    function handleOnClick(picture: Picker_Picture) {\n        setSelectedPicture(picture)\n    }\n\n    const imageRenderer = useCallback(\n        ({ index, left, top, key, photo }) => (\n            <SelectedImage\n                onClick={handleOnClick}\n                selected={\n                    selectedPicture ? selectedPicture.id === photo.id : false\n                }\n                key={key}\n                margin={'2px'}\n                index={index}\n                photo={photo}\n                left={left}\n                top={top}\n            />\n        ),\n        [selectedPicture]\n    )\n\n    function handleOnSubmit() {\n        onClose()\n        if (selectedPicture) {\n            onSubmit(selectedPicture)\n        }\n    }\n\n    const rawPictures = pictures.map((picture) => ({\n        src: picture.download_url,\n        width: 4,\n        height: 3,\n        id: picture.id,\n    }))\n\n    return (\n        <div className=\"modal post-image-modal\">\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-card\">\n                <header className=\"modal-card-head\">\n                    <p className=\"modal-card-title\">Select a picture</p>\n                    <button\n                        className=\"delete\"\n                        aria-label=\"close\"\n                        onClick={onClose}\n                    />\n                </header>\n                <section className=\"modal-card-body\">\n                    <Gallery photos={rawPictures} renderImage={imageRenderer} />\n                </section>\n                <footer className=\"modal-card-foot\">\n                    <button\n                        disabled={!!!selectedPicture}\n                        className=\"button is-success\"\n                        onClick={handleOnSubmit}\n                    >\n                        Save changes\n                    </button>\n                    <button className=\"button\" onClick={onClose}>\n                        Cancel\n                    </button>\n                </footer>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageGalleryPicker\n","/Users/benji/Downloads/React-workshop-main-main/src/api/post.ts",["96","97"],[],"import { Post, PostContent } from './types'\nimport axios from 'axios'\nimport { responsiveFontSizes } from '@mui/material';\n\nconst base_url = 'http://localhost:3004/posts'\n\nasync function getPost(postID: Post['id']): Promise<Post> {\n    // get a unique post\n    // [TODO] remove this return to use a fetch API\n    const response = await fetch(`${base_url}/${postID}`);\n    return await response.json();\n}\n\nasync function getPosts(): Promise<Array<Post>> {\n    // get all posts\n    // [TODO] remove this return to use a fetch API\n    const response = await fetch(base_url)\n    const data = await response.json();\n    return data;\n}\n\nasync function createPost(post: PostContent): Promise<Post> {\n    // create a new post\n    // [TODO] remove this return to use a fetch API\n    return {\n        id: 1,\n        title: 'title',\n        userId: 1,\n        body: 'body',\n        postImageUrl: 'https://picsum.photos/1280/960',\n    }\n}\n\nasync function updatePost(post: Post): Promise<Post> {\n    // update a existing post\n    // [TODO] remove this return to use a fetch API\n    return {\n        id: 1,\n        title: 'title',\n        userId: 1,\n        body: 'body',\n        postImageUrl: 'https://picsum.photos/1280/960',\n    }\n}\n\nasync function deletePost(postID: Post['id']): Promise<Post['id']> {\n    // delete a existing post\n    // [TODO] remove this return to use a fetch API\n    return 1\n}\n\nexport { getPost, getPosts, deletePost, updatePost, createPost }\n","/Users/benji/Downloads/React-workshop-main-main/src/private/SelectedImage.tsx",["98"],[],"import React, { useState, useEffect } from 'react'\nimport { RenderImageProps } from 'react-photo-gallery'\nimport CSS from 'csstype'\nimport { Picker_Picture } from '../api/types'\nimport Checkmark from './Checkmark'\n\nconst imgStyle = {\n    height: '100%',\n    transition:\n        'transform .135s cubic-bezier(0.0,0.0,0.2,1),opacity linear .15s',\n}\nconst selectedImgStyle = {\n    transform: 'translateZ(0px) scale3d(0.9, 0.9, 1)',\n    transition:\n        'transform .135s cubic-bezier(0.0,0.0,0.2,1),opacity linear .15s',\n}\ntype Cont = {\n    left?: number | undefined\n    top?: number | undefined\n    backgroundColor: CSS.Properties['backgroundColor']\n    cursor: CSS.Properties['cursor']\n    overflow: CSS.Properties['overflow']\n    position: CSS.Properties['position']\n}\nconst cont: Cont = {\n    backgroundColor: '#eee',\n    cursor: 'pointer',\n    overflow: 'hidden',\n    position: 'relative',\n}\n\ntype SelectedImageProps = {\n    index: number\n    margin: CSS.Properties['margin']\n    direction?: RenderImageProps['direction']\n    selected: boolean\n    photo: Picker_Picture\n    top: RenderImageProps['top']\n    left: RenderImageProps['left']\n    onClick: (picture: Picker_Picture) => void\n}\n\nconst SelectedImage = ({\n    photo,\n    margin,\n    direction,\n    top,\n    left,\n    selected,\n    onClick,\n}: SelectedImageProps) => {\n    const [isSelected, setIsSelected] = useState(selected)\n    //calculate x,y scale\n    const sx = (100 - (30 / photo.width) * 100) / 100\n    const sy = (100 - (30 / photo.height) * 100) / 100\n    selectedImgStyle.transform = `translateZ(0px) scale3d(${sx}, ${sy}, 1)`\n\n    if (direction === 'column') {\n        cont.position = 'absolute'\n        cont.left = left\n        cont.top = top\n    }\n\n    const handleOnClick = (\n        e: React.MouseEvent<HTMLImageElement, MouseEvent>\n    ) => {\n        setIsSelected(!isSelected)\n        onClick(photo)\n    }\n\n    useEffect(() => {\n        setIsSelected(selected)\n    }, [selected])\n\n    return (\n        <div\n            style={{\n                margin,\n                height: photo.height,\n                width: photo.width,\n                ...cont,\n            }}\n            className={!isSelected ? 'not-selected' : ''}\n        >\n            <Checkmark selected={isSelected ? true : false} />\n            <img\n                style={\n                    isSelected\n                        ? { ...imgStyle, ...selectedImgStyle }\n                        : { ...imgStyle }\n                }\n                {...photo}\n                onClick={handleOnClick}\n            />\n            <style>{`.not-selected:hover{outline:2px solid #06befa}`}</style>\n        </div>\n    )\n}\n\nexport default SelectedImage\n","/Users/benji/Downloads/React-workshop-main-main/src/private/Checkmark.tsx",[],[],{"ruleId":"99","severity":1,"message":"100","line":8,"column":21,"nodeType":"101","messageId":"102","endLine":8,"endColumn":31},{"ruleId":"99","severity":1,"message":"103","line":25,"column":19,"nodeType":"101","messageId":"102","endLine":25,"endColumn":27},{"ruleId":"104","severity":1,"message":"105","line":73,"column":69,"nodeType":"106","messageId":"107","endLine":73,"endColumn":71},{"ruleId":"108","severity":1,"message":"109","line":89,"column":8,"nodeType":"110","endLine":89,"endColumn":12,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":163,"column":25,"nodeType":"114","endLine":163,"endColumn":59},{"ruleId":"99","severity":1,"message":"115","line":7,"column":20,"nodeType":"101","messageId":"102","endLine":7,"endColumn":29},{"ruleId":"99","severity":1,"message":"116","line":9,"column":11,"nodeType":"101","messageId":"102","endLine":9,"endColumn":13},{"ruleId":"99","severity":1,"message":"117","line":1,"column":8,"nodeType":"101","messageId":"102","endLine":1,"endColumn":13},{"ruleId":"118","severity":1,"message":"119","line":8,"column":17,"nodeType":"114","endLine":8,"endColumn":53},{"ruleId":"112","severity":1,"message":"113","line":9,"column":21,"nodeType":"114","endLine":9,"endColumn":48},{"ruleId":"118","severity":1,"message":"120","line":11,"column":17,"nodeType":"114","endLine":17,"endColumn":18},{"ruleId":"99","severity":1,"message":"115","line":6,"column":20,"nodeType":"101","messageId":"102","endLine":6,"endColumn":29},{"ruleId":"121","severity":1,"message":"122","line":13,"column":25,"nodeType":"114","endLine":19,"endColumn":27},{"ruleId":"99","severity":1,"message":"123","line":14,"column":22,"nodeType":"101","messageId":"102","endLine":14,"endColumn":33},{"ruleId":"99","severity":1,"message":"124","line":16,"column":20,"nodeType":"101","messageId":"102","endLine":16,"endColumn":30},{"ruleId":"99","severity":1,"message":"125","line":2,"column":8,"nodeType":"101","messageId":"102","endLine":2,"endColumn":13},{"ruleId":"99","severity":1,"message":"126","line":3,"column":10,"nodeType":"101","messageId":"102","endLine":3,"endColumn":29},{"ruleId":"112","severity":1,"message":"113","line":86,"column":13,"nodeType":"114","endLine":94,"endColumn":15},"@typescript-eslint/no-unused-vars","'setLoading' is assigned a value but never used.","Identifier","unusedVar","'setUsers' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: '_getPost'. Either include it or remove the dependency array.","ArrayExpression",["127"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setAuthor' is assigned a value but never used.","'id' is assigned a value but never used.","'React' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'setPictures' is assigned a value but never used.","'getPicture' is defined but never used.","'axios' is defined but never used.","'responsiveFontSizes' is defined but never used.",{"desc":"128","fix":"129"},"Update the dependencies array to be: [_getPost, id]",{"range":"130","text":"131"},[2480,2484],"[_getPost, id]"]